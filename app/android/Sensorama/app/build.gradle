buildscript {
	repositories {
		maven { url 'https://maven.fabric.io/public' }
	}

	dependencies {
		classpath 'io.fabric.tools:gradle:1.+'
	}
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
	maven { url 'https://maven.fabric.io/public' }
}

android {
	compileSdkVersion 21
	buildToolsVersion "21.1.2"

	defaultConfig {
		applicationId "com.barvoy.sensorama"
		minSdkVersion 15
		targetSdkVersion 21

		// Release engineering
		def fver = file("../../../../VERSION")
		def verString = fver.getText('UTF-8').trim()
		versionName verString
		versionCode verString.toInteger()

		def relNotePath = "../../../relnotes/" + verString + ".md"
		def relNote = new File(relNotePath)
		if (!relNote.exists()) {
			throw new GradleException('The release  not file doesnt exist. Make ' + relNotePath)
		}
		project.ext.set("releaseNotesPath", relNotePath)

		// Parse API stuff.
		def env = System.getenv()
		def cfgFile = env["HOME"] + "/.parse_sensorama_cred"
		def f = file(cfgFile);

		def vals = [:]
		if (f.isFile()) {
			String data = f.getText('UTF-8')
			println "# Found a project-specific config file!"
			def valCount = 0
			data.eachLine { lineStr ->
				def toks = lineStr.split(/=/)
				println "#  loading variable " + toks[0]
				vals.put(toks[0], toks[1])
				valCount += 1
			}
			println "# Total: " + valCount + " variables found"
		}
		if (vals.get("PARSE_API_ID") == null ||
				(vals.get("PARSE_CLIENT_ID")) == null) {
			println "API/CLIENT NOT FOUND!!!"
		}

		def api_id = vals.get("PARSE_API_ID")
		buildConfigField "String", "PARSE_API_ID",
				api_id ? ( "\"" + api_id + "\"" ) : "\"<API_ID_HERE>\""
		def client_id = vals.get("PARSE_CLIENT_ID")
		buildConfigField "String", "PARSE_CLIENT_ID",
				client_id ? ( "\"" + client_id + "\"" ) : "\"<CLIENT_ID_HERE>\""

		// HOME
		def home = env["HOME"]

		// Google Play
		project.ext.set("google_storeFile", home + "/" + vals.get("google_storeFile"))
		project.ext.set("google_storePassword", vals.get("google_storePassword"))
		project.ext.set("google_keyAlias", vals.get("google_keyAlias"))
		project.ext.set("google_keyPassword", vals.get("google_keyPassword"))
	}


	signingConfigs {
		release {
			storeFile	file(project.google_storeFile)
			storePassword	project.google_storePassword
			keyAlias	project.google_keyAlias
			keyPassword	project.google_keyPassword
		}
	}

	buildTypes {
		release {
			signingConfig signingConfigs.release
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

			// Crashlytics Beta
			ext.betaDistributionGroupAliases="sensorama-testers"
			ext.betaDistributionReleaseNotesFilePath=project.releaseNotesPath;
		}
	}

}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	compile 'com.android.support:appcompat-v7:22.2.0'
	compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
		transitive = true;
	}
}
